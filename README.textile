h1. ClayWorks

ClayWorks is a full stack webdevelopment framework built on top of claymore and some extra external utilities.

As ClayWorks itself doesn't contain much code, it is mostly interesting to look at the projects it links to.  This is a handy repository to use in clbuild.


h1. What is it all about?

Some time ago, I wrote a rant about the general idea of what is currently called ClayWorks.  Below is a slightly updated version of this rant.

The rant talks about the general ideas behind the project.  Most of this are things that should happen in the future, as much of it involves documenting much of the currently available system.  I've noticed too, that some of the used libraries will have to change to further reach the goals presented here.


h2. (start 'rant :subject *clayworks*)

h3. What is cl-aymore all about?

The ideas of cl-aymore have been formed through experience and frustrations of creating websites over the years. In general the system strives to the quick creation of maintainable websites.
In order to create that, the system follows the following principles

h4. user-defined

The user should be able to (re)-define and/or extend about any component in the system.

By letting users mold the system to their whishes, the system should minimize the amount of effort to be put in scenarios that the framework didn't forsee.
   
The idea of a user-defined framework implies much freedom.  I don't know the answers to all your problems, but you are in a superb position to find them yourself.

The framework does provide some boundaries (hey, its a framework).

h5. pages and urls

It is a web-framework we are talking about pages here.  There must be a bidirectional connection between pages and urls.

h5. objects

The system provides the user with some extra capabilities regarding the usage of objects and restful calls.  This is only half a limitation, as the user is not at all forced to use this system.

h4. meaningful code

The user should only write code that means something.

With the framework being easily moldable, users will define (and reuse) ways to talk about the system they are defining.  For instance, a standard template for a page, is nothing more than a simple function, in which you can put arbitrary pieces of content.

This approach avoids the usage of generators.  Generated code looks finished, but is meaningless, therefore users might be tricked into believing they've created something that has not been created yet.

h4. learnable

The system contains some features that specifically make it easy to learn the framework.  This will allow new users to learn the system step-by-step, whilst creating better and better sites.

The general idea is to create a bunch learnable content (read: webcasts, tutorials and documents) that make it fun to learn to learn the system.  This should provide newcomers with an entry point, and experienced users with some nice content to look at.

h3. What are the side-effects

There are some side-effects to this approach, most of them have a direct impact on the users.

h4. minor codebase

The system itself exists of a bunch of components thrown together, to form the system that is presented to the users. 

This approach leads to components that are easily tested/maintained/replaced by interested users. The minor amount of code that is created in cl-aymore itself can be tested easily due to its minimal size and functionality.
   
The limited codebase will allow interested users to clearly grasp what is going on through the tubes of communication.

h4. component reuse

Due to the nature of the framework, reusing and extending components should be fairly easy.
   
The framework advises the users to create a virtual separation between the model and the view.  The controller (in a non-web naming of MVC) is created by exporting the right symbols from the model.  The hereby defined model can clearly be reused without any hassle.

However, there is more!  Users define functions as templates for mostly anything they will display.  With minor efforts, users can identify which parts of code they constantly reuse.  Splitting that code out to a separate package is virtually no work and will give the user his own personal toolkit in no time.  This approach allows the users to reuse code specific to their coding style easily.  By splitting it into packages, it allso allows for easy sharing with other users.

The amount of effort needed to reuse (or to be able to reuse components) is much smaller than the amount of code needed in most other frameworks.  No need to hassle with the hard plugin generators of rails anymore \o/

h4. clear system syntax

All the application code can be defined in one easy to understand syntax.

HTML is mapped to lisp-code in a transparant syntax. @(html (head (title "CL-Aymore world")) (body (h1 "Hello swords!")))@
This allows methods to be transparantly called in the generated code, and it allows users to define templates in the code itself (which leads to a far greater flexibility of the templates) without extra overhead (creating new files, following yet another syntax to escape to code mode).  This way of defining html-pages is even shorter than writing HTML-code itself!

JavaScript is mapped trough a javascript-generation library called parenscript.  Again, this provides us with seamingless integration with our own code (both html as logic). The library transforms the code to javascript-code, which implies we can transparantly use readily-created web-frameworks like jQuery.
   
CSS *can* be created in the same system, yet it is currently left out, due to the nature of web-designers.  css-lite should become included, as it allows parenscript to use the features provided by it.  In general, the users of the system should assume that there will be a lot of static css stylesheets to be included too.

h4. quick initial setup

I normally install this through clbuild.  Search for the needed repositories on my github (clayworks, cl-aymore, database-migrations) and add them to wnpp-projects.  Then update the index and run ./clbuild slime  (requre 'clayworks) and hack away :D

I'll probably send an update to the clbuild mailing list in order for them to include clayworks from the start (which makes things easier).

h4. quick and fun

Do what you want to do.  The system provides you with a multiple-inheritance database-backed class persistency framework (this framework may be changed in the future, as I'd like more to be precomputed from the database), for extreme freedom in the creation of the 'model' of your application.  It lets you mold everything in a way that is useable for you, quickly.

Lets put the focus back on creating the application we want to have.
